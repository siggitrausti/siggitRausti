#her2_fin <- segregate_dataset2(her2_data,other_sign_final[,1],0.3,her2_pats,other_sign_final[,2],print_plot=T,coxph_matrix_outp = T)
basal_fin <- basal_fin[complete.cases(basal_fin),]
coxph_all <- coxph(formula = Surv(survival, status) ~ age + NUMVALS + ER + YEAR_DX, data  = basal_fin)
coxph_nogenes <- coxph(formula = Surv(survival, status) ~ age + YEAR_DX + ER, data  = basal_fin)
coxph_onlygenes<- coxph(formula = Surv(survival, status) ~ NUMVALS, data  = basal_fin)
summary(coxph_all)
summary(coxph_nogenes)
summary(coxph_onlygenes)
coxph2 <- coxph(formula = Surv(survival, status) ~ age + NUMVALS + ER + YEAR_DX, data  = basal_fin)
coxph3 <- coxph(formula = Surv(survival, status) ~ ER + YEAR_DX + age, data  = basal_fin)
coxph4 <- coxph(formula = Surv(survival, status) ~ NUMVALS, data  = basal_fin)
basal_fin$lp <- predict(coxph2, type = "lp")
basal_fin$lp_nosign <- predict(coxph3, type = "lp")
basal_fin$lp_onlysign <- predict(coxph4, type = "lp")
fun.survivalROC <- function(lp, t) {
res <- with(basal_fin,
survivalROC(Stime        = survival,
status       = status,
marker       = lp,
predict.time = t,
method       = "NNE",
span = 0.25 * nrow(basal_fin)^(-0.15)))       # KM method without smoothing
## Plot ROCs
res2 <- with(basal_fin,
survivalROC(Stime        = survival,
status       = status,
marker       = lp_nosign,
predict.time = t,
method       = "NNE",
span = 0.25 * nrow(basal_fin)^(-0.15)))       # KM method without smoothing)
## Plot ROCs
res3 <- with(basal_fin,
survivalROC(Stime        = survival,
status       = status,
marker       = lp_onlysign,
predict.time = t,
method       = "NNE",
span = 0.25 * nrow(basal_fin)^(-0.15)))       # KM method without smoothing)
#Plot:
with(res, plot(TP ~ FP, type = "l", main = paste0(basal_fin$sub_vec[1],sprintf(" (%.0f year survival)",t/12)),
cex.lab=1.5, cex.axis=1.25, cex.main=1.5, cex.sub=1.5,lwd = 2,xlab = '1-Specificity',
ylab = 'Sensitivity'))
with(res2,lines(TP ~ FP,lwd = 2,col='red'))
with(res3,lines(TP~FP,lwd = 2,col='blue'))
abline(a = 0, b = 1, lty = 2,lwd = 2,col='grey20')
legend('bottomright', legend=c(paste0("Signature, Age, ER (AUC: ",signif(res$AUC,2),')'),
paste0("Only Age + ER (AUC: ",signif(res2$AUC,2),')'),
paste0("Only Signature (AUC: ",signif(res3$AUC,2),')')),
col=c("black", "red","blue"), lty=c(1,1,1), cex=1)
print(paste0('AUC for Expression, age and ER: ',signif(res$AUC,2)))
print(paste0('AUC for Expression only : ',signif(res3$AUC,2)))
print(paste0('AUC for age and ER only : ',signif(res2$AUC,2)))
}
## 2 x 5 layout
#layout(matrix(1:5, byrow = T, ncol = 5))
## Model with age and sex
#res.survivalROC.age.expr <- lapply(1:5 * 52, function(t) {
#  fun.survivalROC('lp.Expression', t)
#})
#par(mfrow=c(1,1))
par(mar=c(5,5,2.5,2.5))
#png('Basal_survival_basal_sign_JAN2020.png', width = 480, height = 480, units = "px")
fun.survivalROC('lp.Expression', 5*12)
# Plot all three together:
r.lower = rep(NA,3)
r.upper = rep(NA,3)
r.mean = rep(NA,3)
label_text <- cbind(c('Signature','Age + ER','Signature + Age + ER'),c(rep('   ',3)))
test_pred <- predict(coxph4,newdata = basal_fin, type = "lp")
cindex_validation = concordance.index (test_pred, surv.time = basal_fin$survival,
surv.event=basal_fin$status, method = "noether",alpha = 0.05)
r.lower[1] <- cindex_validation$lower
r.upper[1] <- cindex_validation$upper
r.mean[1] <- cindex_validation$c.index
test_pred <- predict(coxph3,newdata = basal_fin, type = "lp")
cindex_validation = concordance.index (test_pred, surv.time = basal_fin$survival,
surv.event=basal_fin$status, method = "noether",alpha = 0.05)
r.lower[2] <- cindex_validation$lower
r.upper[2] <- cindex_validation$upper
r.mean[2] <- cindex_validation$c.index
test_pred <- predict(coxph2,newdata = basal_fin, type = "lp")
cindex_validation = concordance.index (test_pred, surv.time = basal_fin$survival,
surv.event=basal_fin$status, method = "noether",alpha = 0.05)
r.lower[3] <- cindex_validation$lower
r.upper[3] <- cindex_validation$upper
r.mean[3] <- cindex_validation$c.index
library(rmeta)
par(mar=c(0.1,0.1,0.1,0.1))
#png('Basal_signature_forestplot_JAN2020.png',res=300,width = 6,height = 2.1,units = 'in')
forestplot.surv(labeltext=label_text, mean=r.mean, lower=r.lower, upper=r.upper, zero=0.5,
align=c("l"), graphwidth=grid::unit(2, "inches"), x.ticks=seq(0.4,1,0.1),
xlab="Concordance Index",box.size = c(0.5,0.5,1),
col=meta.colors(box=c("royalblue","royalblue",'red'), line="darkblue", zero="darkred"),
clip=c(0.5,1),
main = paste0(basal_fin$sub_vec[1],' (Concordance Index)'))
#dev.off()
# January 2020
library(dendextend)
library(colorspace)
library(factoextra)
library(gplots)
library(tidyr)
library(dplyr)
library(survminer)
library(survival)
library(BiocManager)
library(ggforce)
library(igraph)
library(devtools)
library(siggitRausti)
library(genefilter)
library(dplyr)
library(Hmisc)
library(devtools)
library(factoextra)
library(NbClust)
library(siggitRausti)
library(ggcorrplot)
library(ggpubr)
library(mixOmics)
source('./segregate_dataset2.R')
source('./findBestSurvival2.R')
col5 <- ColBrew('JCO')
setwd('E:/Dropbox/R_Dropbox')
source("./FJfunctions/loadAll.r")
loadAll()
# A script for
met_raw <- read_excel('./Metabolomics_breast_cancer_cell_lines_JAN2020.xlsx','DATA','A2:CW917')
met_meta <- read_excel('./Metabolomics_breast_cancer_cell_lines_JAN2020.xlsx','PEAK_INFO','A1:G2690')
met_raw <- data.frame(met_raw)
tn <- c('MDAMB436','BT549','MDAMB231','HCC38','HS578T','MDAMB468','HCC1806','BT20')
non_malignant <- c('HME1','MCF10A','MCF12A','184B5')
er_pr_pos <- c('ZR751','MCF7','T47D')
her2_enriched <- c('AU565','HCC1954','SKBR3')
grep(tn[4],colnames(met_raw))
tn_id <- unique(grep(paste(tn,collapse="|"), colnames(met_raw), value=F))
nm_id <- unique(grep(paste(non_malignant,collapse="|"), colnames(met_raw), value=F))
er_id <- unique(grep(paste(er_pr_pos,collapse="|"), colnames(met_raw), value=F))
her2_id <- unique(grep(paste(her2_enriched,collapse="|"), colnames(met_raw), value=F))
# Okay, now make a vector for subtype specificity:
subtype <- rep(NA,ncol(met_raw))
subtype[tn_id] <- 'TNBC'
subtype[nm_id] <- 'Normal'
subtype[er_id] <- 'ER_PR_pos'
subtype[her2_id] <- 'HER2'
subtype_basal <- rep('Non-basal',length(subtype))
subtype_basal[tn_id] <- 'Basal'
subtype_basal <- subtype_basal
subtype_basal <- as.factor(subtype_basal)
met_raw <- data.frame(t(met_raw))
# Remove normal-like cells:
met_raw <- met_raw[-nm_id,]
subtype <- subtype[-nm_id]
subtype_basal <- subtype_basal[-nm_id]
met_raw <- met_raw[-1,]
# Now scale the data:
met_raw2 <- log(met_raw,10)
met_raw2 <- scale(met_raw2)
#met_raw2 <- data.frame(cbind(Subtype = subtype[-1],met_raw2))
dat = as.matrix(met_raw2)
subtype2 <- as.factor(subtype[-1])
vac.plsda <- mixOmics::plsda(dat, Y=subtype2, ncomp=4)
mixOmics::plotIndiv(vac.plsda,legend=T,title='PLS-DA of BC metabobypes',ellipse=T,col=ColBrew('JCO')[1:3])
# Try with only basal vs rest:
dat = as.matrix(met_raw2)
vac.plsda <- mixOmics::plsda(dat, Y=subtype_basal[-1], ncomp=3)
mixOmics::plotIndiv(vac.plsda,legend=T,title='PLS-DA of BC metabobypes',ellipse=T,col=ColBrew('JCO')[1:2])
vp = mixOmics::vip(vac.plsda)
df = data.frame(vp,row.names = dimnames(vp)[[1]])
## Discriminants on the 1st component with VIP > 1
ft = rownames(df)[which(df$comp1 > 1)]
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
# PERFORM OPLS-DA:
ropls.oplsda <- ropls::opls(dat, y=subtype_basal[-1],predI = 1, orthoI = NA)
## Feature selections based on VIP
vp = ropls::getVipVn(ropls.oplsda)
## Discriminants on the 1st component with VIP > 1
ft <- names(which(vp >= 1.5))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
ft <- names(which(vp >= 1))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
ft <- names(which(vp >= 2))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
ft <- names(which(vp >= 1.75))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
grep('proline',met_meta$name,ignore.case = T)]
grep('proline',met_meta$name,ignore.case = T)
met_meta$name[grep('proline',met_meta$name,ignore.case = T)]
met_meta$name[grep('semialdehyde',met_meta$name,ignore.case = T)]
# Plot interesting metabolite levels:
# Glutathione:
met_raw3 <- cbind(Subtype = subtype_basal[-1],met_raw)
# Change names of metabolites:
for (i in 2:ncol(met_raw3)){
colnames(met_raw3)[i] <- met_meta$name[which(met_meta$`Ions IDX` == as.numeric(gsub("[a-zA-Z ]", "", colnames(met_raw3)[i])))]
}
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Glutamic-gamma-semialdehyde','L-Proline')))
boxMets(met_raw3,id_mets[c(1,5,6,7)],'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Glutamic-gamma-semialdehyde','L-Proline',
'L-Glutamic-gamma-semialdehyde')))
boxMets(met_raw3,id_mets[c(1,5,6,7,8)],'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
# Plot interesting metabolite levels:
# Glutathione:
met_raw3 <- cbind(Subtype = subtype_basal[-1],met_raw)
# Change names of metabolites:
for (i in 2:ncol(met_raw3)){
colnames(met_raw3)[i] <- met_meta$name[which(met_meta$`Ions IDX` == as.numeric(gsub("[a-zA-Z ]", "", colnames(met_raw3)[i])))]
}
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Glutamic-gamma-semialdehyde','L-Proline',
'L-Glutamic-gamma-semialdehyde')))
which(colnames(met_raw3) %in% 'L-Glutamic-gamma-semialdehyde')
colnames(met_raw3)
which(colnames(met_raw3) %in% 'L-Cysteine')
met_meta$name[grep('proline',met_meta$name,ignore.case = T)]
met_meta$name[grep('semialdehyde',met_meta$name,ignore.case = T)]
met_meta$name[grep('pyrroline',met_meta$name,ignore.case = T)]
which(colnames(met_raw3) %in% '1-Pyrroline-5-carboxylic acid')
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Glutamic-gamma-semialdehyde','L-Proline',
'1-Pyrroline-5-carboxylic acid')))
boxMets(met_raw3,id_mets[c(1,5,6,7,8)],'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Glutamic-gamma-semialdehyde','L-Proline',
'L-Glutamate')))
boxMets(met_raw3,id_mets[c(1,5,6,7,8)],'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- which(colnames(met_raw3) %in% met_meta$name[grep('Glutathione',met_meta$name,ignore.case = T)])
id_mets <- c(id_mets,which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','L-Glutamic-gamma-semialdehyde',
'L-Glutamate')))
boxMets(met_raw3,id_mets,'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
id_mets <- which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','L-Glutamic-gamma-semialdehyde',
'L-Glutamate','Glutathione','Oxidized glutathione'))
boxMets(met_raw3,id_mets,'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
id_mets <- which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','L-Glutamic-gamma-semialdehyde','L-Glutamate','Glutathione','Oxidized glutathione'))
met_raw3 <- cbind(Subtype = subtype_basal[-1],met_raw)
# Change names of metabolites:
for (i in 2:ncol(met_raw3)){
colnames(met_raw3)[i] <- met_meta$name[which(met_meta$`Ions IDX` == as.numeric(gsub("[a-zA-Z ]", "", colnames(met_raw3)[i])))]
}
id_mets <- which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','L-Glutamic-gamma-semialdehyde','L-Glutamate','Glutathione','Oxidized glutathione'))
id_mets <- which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','Glutathione','Oxidized glutathione','L-Glutamic-gamma-semialdehyde'))
grep('semialdehyde',colnames(mmet_raw))
grep('semialdehyde',colnames(met_raw3))
grep('semialdehyde',colnames(met_raw3),ignore.case = T)
colnames(met_raw3)[grep('semialdehyde',colnames(met_raw3),ignore.case = T)]
id_mets <- which(colnames(met_raw3) %in% c('L-Cysteine','L-Proline','Glutathione','Oxidized glutathione'))
boxMets(met_raw3,id_mets,'Subtype','Subtype',stat_test = T,ref_group = 'Non-basal')
colnames(met_raw3)[grep('gamma',colnames(met_raw3),ignore.case = T)]
colnames(met_raw3)[grep('glutamate',colnames(met_raw3),ignore.case = T)]
colnames(met_raw3)[grep('pentanoic',colnames(met_raw3),ignore.case = T)]
colnames(met_raw3)[grep('glutamyl',colnames(met_raw3),ignore.case = T)]
colnames(met_raw3)[grep('cysteine',colnames(met_raw3),ignore.case = T)]
colnames(met_raw3)[grep('cystein',colnames(met_raw3),ignore.case = T)]
ft <- names(which(vp >= 2))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
ft <- names(which(vp >= 1.75))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
ft <- names(which(vp >= 1.5))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
## Discriminants on the 1st component with VIP > 1
ft <- names(which(vp >= 2.5))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
## Discriminants on the 1st component with VIP > 1
ft <- names(which(vp >= 2.25))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
ft <- names(which(vp >= 1))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
ft <- names(which(vp >= 1.5))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
## Discriminants on the 1st component with VIP > 1
ft <- names(which(vp >= 2))
ft
met_meta$name[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <-met_meta$`HMDB ID`[which(met_meta$`Ions IDX` %in% as.numeric(gsub('[a-zA-Z ]', '', ft)))]
hmdb_mets <- unique(hmdb_mets)
write.table(hmdb_mets, file = "Metabolites_basal_JAN2020.txt", row.names = F, col.names = F,sep = "\t",quote=F)
library(rcellminer)
library(rcellminerData)
library(Hmisc)
library(devtools)
library(factoextra)
library(NbClust)
install_github('siggitrausti/siggitRausti',force=T)
library(siggitRausti)
library(ggcorrplot)
library(dplyr)
library(RNOmni)
library(gplots)
# NOW TRY TO GO THROUGH ALL THE DRUGS IN THE DATABASE, AND SEE WHICH ONES ARE ACTUALLY CORRELATED WITH
# GLUTATHIONE RATIO:
setwd('E:/Dropbox/R_Dropbox')
source("./FJfunctions/loadAll.r")
loadAll()
setwd('E:/Dropbox/R_Dropbox/13C_analysis_and_IDH2_SEPT2019/')
met_means <- read_excel('41467_2019_9695_MOESM2_ESM.xlsx','Met_alpha','A1:BG2185')
met_sds <- read_excel('41467_2019_9695_MOESM2_ESM.xlsx','Met_alpha_SE','A1:BG2185')
colnames(met_means) <- unlist(as.character(met_means[3,]))
colnames(met_sds) <- unlist(as.character(met_sds[3,]))
met_means <- met_means[-c(1:3),]
met_sds <- met_sds[-c(1:3),]
# NEED TO COMPARE THIS TO DRUG EFFICACY LEVELS IN NCI60
# Change name of tissues so that they will match:
met_means2 <- met_means
drugAct <- exprs(getAct(rcellminerData::drugData))
drugAct <- data.frame(drugAct)
drugAct_2 <- drugAct
colnames(met_means2) <- gsub('Breast_','BR.',colnames(met_means2))
colnames(met_means2) <- gsub('CNS_','CNS.',colnames(met_means2))
colnames(met_means2) <- gsub('Colon_','CO.',colnames(met_means2))
colnames(met_means2) <- gsub('Lung_','LC.',colnames(met_means2))
colnames(met_means2) <- gsub('Melanoma_','ME.',colnames(met_means2))
colnames(met_means2) <- gsub('Ovarian_','OV.',colnames(met_means2))
colnames(met_means2) <- gsub('Prostate_','PR.',colnames(met_means2))
colnames(met_means2) <- gsub('Renal_','RE.',colnames(met_means2))
colnames(met_means2) <- gsub('\\.','',colnames(met_means2))
#rownames(heyhey2) <- gsub('\\.','',rownames(heyhey2))
colnames(drugAct_2) <- gsub('\\.','',colnames(drugAct_2))
# Extract only FDA-approved drugs:
drugAnnot <- getFeatureAnnot(rcellminerData::drugData)[["drug"]]
tmpDA <- drugAnnot[drugAnnot$FDA_STATUS != "-", c("NSC", "FDA_STATUS")]
# See if the ratio of oxidizes to non-oxidized is the case:
tmpDrugAct <- drugAct_2[rownames(drugAct_2) %in% tmpDA$NSC,]
#take All metabolites random genes from the met_means, and check the correlation with drugs:
percentage_drugs_neg_assoc <- rep(NA,dim(met_means2)[1])
percentage_drugs_pos_assoc <- rep(NA,dim(met_means2)[1])
#for (o in 1:dim(met_means2)[1]){
mean_glut2 <- data.frame(met_means2[grep('Proline',met_means$Annotation,ignore.case = T)[1],])
#mean_glut2 <- data.frame(met_means2[which(met_means$Annotation %in% '2-Oxoglutarate ; Oxoglutaric acid'),])
#mean_glut2_3 <- data.frame(met_means2[which(met_means$Annotation %in% '3-Ureidoisobutyrate ; Alanylglycine ; D-Glutamine ; Glycylsarcosine ; L-Glutamine ; L-glutamine ; Ureidoisobutyric acid'),])
#mean_glut2 <- data.frame(met_means2[o,])
mean_glut3 <- data.frame(met_means2[grep('Glutathione',met_means$Annotation,ignore.case = T)[1],])
#mean_glut3 <- data.frame(met_means2[ids_chosen2[487],])
mean_glut2 <- mean_glut2[,-c(1,2,4,5)]
mean_glut3 <- mean_glut3[,-c(1,2,4,5)]
#mean_glut2_2 <- mean_glut2_2[,-c(1,2,4,5)]
#mean_glut2_3 <- mean_glut2_3[,-c(1,2,4,5)]
mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3)))
#mean_glut4 <- data.frame(t(mean_glut2))
#mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3,mean_glut2_2,mean_glut2_3)))
#colnames(mean_glut4) <- unlist(mean_glut4[1,])
mean_glut4 <- data.frame(mean_glut4[-1,])
colnames(mean_glut4) <- c('Proline','GSH')
mean_glut4$Proline <- as.numeric(as.character(mean_glut4$Proline))
mean_glut4$GSH <- as.numeric(as.character(mean_glut4$GSH))
#mean_glut4$OAA <- as.numeric(as.character(mean_glut4$OAA))
#mean_glut4$Glutamate <- as.numeric(as.character(mean_glut4$Glutamate))
mean_glut4 <- mean_glut4[complete.cases(mean_glut4),]
#mean_glut4 <- mean_glut4[-c(which(is.na(mean_glut4$GSH)))]
mean_glut4 <- cbind(mean_glut4,Ratio = rep(0,nrow(mean_glut4)))
for (i in 1:nrow(mean_glut4)){
#mean_glut4$Ratio[i] <- mean_glut4$Proline[i]/mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- mean_glut4$OAA[i]/mean_glut4$Glutamate[i]
mean_glut4$Ratio[i] <- mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- (mean_glut4$Proline[i]*(mean_glut4$OAA[i]/mean_glut4$Glutamate))/mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- mean_glut4$Proline[i]
}
cell_type_vec <- rep(0,nrow(mean_glut4))
#for (k in 1:nrow(mean_glut4)){
#  cell_type_vec[k] <- substr(rownames(mean_glut4)[k],start=1,stop=2)
#}
mean_glut4 <- data.frame(cbind(mean_glut4,cell_type = cell_type_vec))
#mean_glut4$cell_type <- as.factor(mean_glut4$cell_type)
# ADDED 04.01.20: MAKE THE DISTRIBUTION LINEAR BEFORE DOING THE LINEAR REGRESSION:
p_vec <- rep(0,nrow(tmpDrugAct))
coef_vec <- rep(0,nrow(tmpDrugAct))
for (j in 1:nrow(tmpDrugAct)){
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[j,id_in_glut],na.rm=T)
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
#mean_glut5$Ratio <- rankNorm(mean_glut5$Ratio)
#mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
#mean_glut5$Drug.efficacy <- rankNorm(mean_glut5$Drug.efficacy)
if (dim(mean_glut5)[1] != 0){
#model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#temp_p <- coef(summary(model_1))[,4][2]
#coef_vec[j] <- coef(summary(model_1))[,1][2]
model_2 <- cor.test(as.numeric(mean_glut5$Drug.efficacy),as.numeric(mean_glut5$Ratio),method = 'spearman')
p_vec[j] <- model_2$p.value
coef_vec[j] <- model_2$estimate
} else {
coef_vec[j] <- NA
p_vec[j] <- NA
}
rm(model_2)
}
#p_vec2 <- p.adjust(p_vec,method = 'BH')
#rownames(drugAct_2)[which(p_vec2 < 0.05)]
#drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.05)]))
drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.001 & coef_vec < 0)]))
#no_sign_neg <- length(which(p_vec < 0.05 & coef_vec < 0))
#no_sign_pos <- length(which(p_vec < 0.05 & coef_vec > 0))
#drugs_sign <- data.frame(drugs_sign[complete.cases(drugs_sign),])
#percentage_drugs_neg_assoc[o] <- (no_sign_neg/240)*100 # percentage of all FDA approved drugs that are corr with ratio...
#percentage_drugs_pos_assoc[o] <- (no_sign_pos/240)*100
#print(paste0('Round ',o))
#}
#saveRDS(percentage_drugs_pos_assoc, file = "Percent_drugs_POS_correlated_with_MET_MEANS_JAN2020_spearman_NEW.rds")
#percentage_drugs
#drug_of_interest <- 'Rapamycin'
# Plot for drug of interest:
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
if (length(id_in_glut) == 0){
mean_glut5$Drug.efficacy[i] <- NA
} else {
#mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[which(rownames(tmpDrugAct) %in% as.character(searchForNscs(drug_of_interest))),id_in_glut],na.rm=T)
mean_glut5$Drug.efficacy[i] <- tmpDrugAct[which(rownames(tmpDrugAct) %in% '697286'),id_in_glut]
}
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
#mean_glut5$Drug.efficacy <- rankNorm(mean_glut5$Drug.efficacy)
#mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
# Take out outliers:
#mean_glut5 <- mean_glut5[-which(mean_glut5$Drug.efficacy > 3),]
#model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
#summary(model_1)
# PLOT:
#new = data.frame(mean_glut5$Ratio,mean_glut5$cell_type)
#colnames(new) <- c('Ratio','cell_type')
#mean_glut5$predicted_vals <- predict(model_1,type = 'response')
#mean_glut5$only_drug <- coef(model_1)[2]*mean_glut5$Ratio + coef(model_1)[1]
p <- ggplot(mean_glut5, aes(x = Ratio, y = Drug.efficacy) ) +
geom_point()
#+
#geom_line(aes(y = only_drug), size = 1,color='red')
# Plot beautifully:
p2 <- plotLookForPaper(p,'LY-294002 sensitivity','Glutathione abundance') +
theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10))
p2
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
colnames(mean_glut_box)[3] <- 'Glutathione'
#install_github('siggitrausti/siggitRausti',force=T)
#library(siggitRausti)
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Glutathione levels',common_legend = F)
outp1
# Save the boxplot and correlation graph
p_fin3 <- grid.arrange(arrangeGrob(p2,outp1,ncol=1,nrow=2))
p_fin3 <- as_ggplot(p_fin3) +
draw_plot_label(label = c("A", "B"), size = 24,
x = c(0, 0), y = c(1, 0.5)) # Add labels
p_fin3
ggsave('GSH_LY294002_2.png',width = 6, height = 12, units = "in")
p2 <- p2 + ggtitle('NCI-60 drug response')
p2
setwd("E:/Dropbox/R_Dropbox/siggitRausti")
library(devtools)
document()
