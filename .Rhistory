p1 <- ggboxplot(rnaseq_fin2, x = 'phenotype', y = 'IDH2',
fill = 'phenotype', palette = ColBrew('JCO'),
ylab = "Metabolite", xlab = "Treatment",
width = 0.7,size=0.9) +
stat_compare_means(size=10,label='p.signif',hide.ns = T,ref.group = 'D492_2d',method='t.test')
p1
boxMets(rnaseq_fin2,id_chosen2,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST.png',width = 15, height = 15, units = "in")
id_chosen <- which(colnames(rnaseq_fin2) %in% c('GSTP1','IDH1','ME2','GLS','GSTO1','GPX1','ME1'))
boxMets(rnaseq_fin2,id_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <- c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1')
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <-  which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1'))
boxMets(rnaseq_fin2,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST.png',width = 15, height = 15, units = "in")
hmle_D492_sub <- rnaseq_HMLE_2[,which(colnames(rnaseq_HMLE_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
View(hmle_D492_sub)
# For HMLE:
new_colnames <- c()
for (i in 1:ncol(hmle_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(hmle_D492_sub)[i])])
}
colnames(hmle_D492_sub) <- new_colnames
# FOR HMLE:
phenotype <- c(rep('HMLE-EPI',9),rep('HMLE-MES',9))
rnaseq_hmle_fin <- cbind(phenotype = phenotype,hmle_D492_sub)
View(rnaseq_hmle_fin)
View(rnaseq_fin2)
genes_chosen <-  which(colnames(rnaseq_hmle_fin) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1'))
boxMets(rnaseq_hmle_fin,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST2.png',width = 15, height = 15, units = "in")
id_genes <- which(hugo_genes$hgnc_symbol %in% c("GLS","IDH1","PYCR1","IDH2","GSS","ME1","ACLY","FASN","GSR","PRODH","ME2",
"GSTP1","GSTO1","MGST1","GPX1","GSTM3","GSTK1","IDH3"))
rnaseq_D492_sub <- rnaseq_D492_2[,which(colnames(rnaseq_D492_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
hmle_D492_sub <- rnaseq_HMLE_2[,which(colnames(rnaseq_HMLE_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
# For D492:
new_colnames <- c()
for (i in 1:ncol(rnaseq_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(rnaseq_D492_sub)[i])])
}
colnames(rnaseq_D492_sub) <- new_colnames
# For HMLE:
new_colnames <- c()
for (i in 1:ncol(hmle_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(hmle_D492_sub)[i])])
}
colnames(hmle_D492_sub) <- new_colnames
# FOR D492:
phenotype <- c(rep('D492_2d',3),rep('D492_3d',3),rep('D492M_2d',3),rep('D492M_3d',3))
rnaseq_fin <- cbind(phenotype = phenotype,rnaseq_D492_sub)
# Just focus on 2d, for now:
rnaseq_fin2 <- rnaseq_fin[c(1,2,3,7,8,9),]
# FOR HMLE:
phenotype <- c(rep('HMLE-EPI',9),rep('HMLE-MES',9))
rnaseq_hmle_fin <- cbind(phenotype = phenotype,hmle_D492_sub)
heyhey <- data.frame(nci60GeneExpZ[c("GLS","IDH1","PYCR1","IDH2","GSS","ME1","ACLY","FASN","GSR","PRODH","ME2",
"GSTP1","GSTO1","MGST1","GPX1","GSTM3","GSTK1","IDH3"),])
heyhey <- data.frame(t(heyhey))
heyhey_breast <- heyhey[grepl( "BR." , rownames( heyhey ) ),]
str(heyhey)
cor(heyhey_breast)
res2 <- rcorr(as.matrix(heyhey_breast))
res2
id_genes <- which(hugo_genes$hgnc_symbol %in% c('IDH3A'))
id_genes <- which(hugo_genes$hgnc_symbol %in% c("GLS","IDH1","PYCR1","IDH2","GSS","ME1","ACLY","FASN","GSR","PRODH","ME2",
"GSTP1","GSTO1","MGST1","GPX1","GSTM3","GSTK1","IDH3A"))
rnaseq_D492_sub <- rnaseq_D492_2[,which(colnames(rnaseq_D492_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
hmle_D492_sub <- rnaseq_HMLE_2[,which(colnames(rnaseq_HMLE_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
# For D492:
new_colnames <- c()
for (i in 1:ncol(rnaseq_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(rnaseq_D492_sub)[i])])
}
colnames(rnaseq_D492_sub) <- new_colnames
# For HMLE:
new_colnames <- c()
for (i in 1:ncol(hmle_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(hmle_D492_sub)[i])])
}
colnames(hmle_D492_sub) <- new_colnames
# FOR D492:
phenotype <- c(rep('D492_2d',3),rep('D492_3d',3),rep('D492M_2d',3),rep('D492M_3d',3))
rnaseq_fin <- cbind(phenotype = phenotype,rnaseq_D492_sub)
# Just focus on 2d, for now:
rnaseq_fin2 <- rnaseq_fin[c(1,2,3,7,8,9),]
# FOR HMLE:
phenotype <- c(rep('HMLE-EPI',9),rep('HMLE-MES',9))
rnaseq_hmle_fin <- cbind(phenotype = phenotype,hmle_D492_sub)
id_chosen <- which(colnames(rnaseq_fin2) %in% c('GSTP1','IDH1','ME2','GLS','GSTO1','GPX1','ME1','IDH3A'))
boxMets(rnaseq_fin2,id_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <-  which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A'))
boxMets(rnaseq_fin2,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST.png',width = 15, height = 15, units = "in")
genes_chosen <-  which(colnames(rnaseq_hmle_fin) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A'))
boxMets(rnaseq_hmle_fin,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST2.png',width = 15, height = 15, units = "in")
heyhey <- data.frame(nci60GeneExpZ[c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A'),])
heyhey <- data.frame(t(heyhey))
heyhey_breast <- heyhey[grepl( "BR." , rownames( heyhey ) ),]
str(heyhey)
cor(heyhey_breast)
res2 <- rcorr(as.matrix(heyhey_breast))
res2
#
rcorr(heyhey$IDH2,heyhey$GSTP1)
# MAKE A FIGURE PANEL SHOWING THE CORRELATION OF THESE GENES!!!
color.palette  <- colorRampPalette(c("blue", "white", "red"))(20)
cor_mat <- as.matrix(cor(heyhey_breast))
heatmap(cor_mat,symm=T,col=color.palette)
km.res <- kmeans(heyhey_breast, 2, nstart = 50)
print(km.res)
aggregate(heyhey_breast, by=list(cluster=km.res$cluster), mean)
dd <- cbind(heyhey_breast, cluster = km.res$cluster)
km.res$size
# Check the correlation of cell line to drug response:
cluster_col <- rep(0,5)
for (i in 1:5){
if (dd$cluster[i] == 1){
cluster_col[i] = 1
} else {
cluster_col[i] = -1
}
}
dd <- cbind(dd,cluster2 = cluster_col)
drugs <- as.character(searchForNscs("tamoxifen")[1])
pcResults <- rcorr(nci60DrugActZ[drugs, c(1:5)], dd$cluster2)
pcResults$P
# PLOT THE DRUG RESISTANCE:
plot(dd$cluster2,as.numeric(nci60DrugActZ[drugs, c(1:5)]))
View(dd)
id_chosen <- which(colnames(rnaseq_fin2) %in% c('GSTP1','IDH1','ME2','GLS','GSTO1','GPX1','ME1','IDH3A','FASN'))
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <-  which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A','FASN'))
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <-  which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A','FASN'))
boxMets(rnaseq_fin2,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST.png',width = 15, height = 15, units = "in")
genes_chosen <-  which(colnames(rnaseq_hmle_fin) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','IDH3A','FASN'))
boxMets(rnaseq_hmle_fin,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST2.png',width = 15, height = 15, units = "in")
heyhey <- data.frame(nci60GeneExpZ[c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1',),])
heyhey <- data.frame(t(heyhey))
heyhey_breast <- heyhey[grepl( "BR." , rownames( heyhey ) ),]
str(heyhey)
cor(heyhey_breast)
res2 <- rcorr(as.matrix(heyhey_breast))
res2
#
rcorr(heyhey$IDH2,heyhey$GSTP1)
# MAKE A FIGURE PANEL SHOWING THE CORRELATION OF THESE GENES!!!
color.palette  <- colorRampPalette(c("blue", "white", "red"))(20)
cor_mat <- as.matrix(cor(heyhey_breast))
heatmap(cor_mat,symm=T,col=color.palette)
# NOW, SORT ALL CELL LINES INTO CLUSTERS, AND CORRELATE TO DRUG-RESPONSE...
library(factoextra)
heyhey <- data.frame(nci60GeneExpZ[c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1'),])
heyhey <- data.frame(t(heyhey))
heyhey_breast <- heyhey[grepl( "BR." , rownames( heyhey ) ),]
str(heyhey)
cor(heyhey_breast)
res2 <- rcorr(as.matrix(heyhey_breast))
res2
#
rcorr(heyhey$IDH2,heyhey$GSTP1)
# MAKE A FIGURE PANEL SHOWING THE CORRELATION OF THESE GENES!!!
color.palette  <- colorRampPalette(c("blue", "white", "red"))(20)
cor_mat <- as.matrix(cor(heyhey_breast))
heatmap(cor_mat,symm=T,col=color.palette)
# NOW, SORT ALL CELL LINES INTO CLUSTERS, AND CORRELATE TO DRUG-RESPONSE...
library(factoextra)
library(NbClust)
km.res <- kmeans(heyhey_breast, 2, nstart = 50)
print(km.res)
aggregate(heyhey_breast, by=list(cluster=km.res$cluster), mean)
dd <- cbind(heyhey_breast, cluster = km.res$cluster)
km.res$size
# Check the correlation of cell line to drug response:
cluster_col <- rep(0,5)
for (i in 1:5){
if (dd$cluster[i] == 1){
cluster_col[i] = 1
} else {
cluster_col[i] = -1
}
}
dd <- cbind(dd,cluster2 = cluster_col)
drugs <- as.character(searchForNscs("tamoxifen")[1])
pcResults <- rcorr(nci60DrugActZ[drugs, c(1:5)], dd$cluster2)
pcResults$P
heyhey <- data.frame(nci60GeneExpZ[c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','ACLY','GSS','GSR'),])
heyhey <- data.frame(t(heyhey))
heyhey_breast <- heyhey[grepl( "BR." , rownames( heyhey ) ),]
str(heyhey)
cor(heyhey_breast)
res2 <- rcorr(as.matrix(heyhey_breast))
res2
#
rcorr(heyhey$IDH2,heyhey$GSTP1)
# MAKE A FIGURE PANEL SHOWING THE CORRELATION OF THESE GENES!!!
color.palette  <- colorRampPalette(c("blue", "white", "red"))(20)
cor_mat <- as.matrix(cor(heyhey_breast))
heatmap(cor_mat,symm=T,col=color.palette)
# NOW, SORT ALL CELL LINES INTO CLUSTERS, AND CORRELATE TO DRUG-RESPONSE...
library(factoextra)
library(NbClust)
km.res <- kmeans(heyhey_breast, 2, nstart = 50)
print(km.res)
aggregate(heyhey_breast, by=list(cluster=km.res$cluster), mean)
dd <- cbind(heyhey_breast, cluster = km.res$cluster)
km.res$size
# Check the correlation of cell line to drug response:
cluster_col <- rep(0,5)
for (i in 1:5){
if (dd$cluster[i] == 1){
cluster_col[i] = 1
} else {
cluster_col[i] = -1
}
}
dd <- cbind(dd,cluster2 = cluster_col)
drugs <- as.character(searchForNscs("tamoxifen")[1])
pcResults <- rcorr(nci60DrugActZ[drugs, c(1:5)], dd$cluster2)
pcResults$P
id_genes <- which(hugo_genes$hgnc_symbol %in% c("GLS","IDH1","PYCR1","IDH2","GSS","ME1","ACLY","FASN","GSR","PRODH","ME2",
"GSTP1","GSTO1","MGST1","GPX1","GSTM3","GSTK1","IDH3A"))
rnaseq_D492_sub <- rnaseq_D492_2[,which(colnames(rnaseq_D492_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
hmle_D492_sub <- rnaseq_HMLE_2[,which(colnames(rnaseq_HMLE_2) %in% hugo_genes$ensembl_gene_id[id_genes])]
# For D492:
new_colnames <- c()
for (i in 1:ncol(rnaseq_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(rnaseq_D492_sub)[i])])
}
colnames(rnaseq_D492_sub) <- new_colnames
# For HMLE:
new_colnames <- c()
for (i in 1:ncol(hmle_D492_sub)){
new_colnames <- c(new_colnames,hugo_genes$hgnc_symbol[which(hugo_genes$ensembl_gene_id %in% colnames(hmle_D492_sub)[i])])
}
colnames(hmle_D492_sub) <- new_colnames
# FOR D492:
phenotype <- c(rep('D492_2d',3),rep('D492_3d',3),rep('D492M_2d',3),rep('D492M_3d',3))
rnaseq_fin <- cbind(phenotype = phenotype,rnaseq_D492_sub)
# Just focus on 2d, for now:
rnaseq_fin2 <- rnaseq_fin[c(1,2,3,7,8,9),]
# FOR HMLE:
phenotype <- c(rep('HMLE-EPI',9),rep('HMLE-MES',9))
rnaseq_hmle_fin <- cbind(phenotype = phenotype,hmle_D492_sub)
id_chosen <- which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','ACLY','GSS','GSR'))
boxMets(rnaseq_fin2,id_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
# Genes that correspond to ROS stuff in breast cancer cell lines:
genes_chosen <-  which(colnames(rnaseq_fin2) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','ACLY','GSS','GSR'))
boxMets(rnaseq_fin2,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST.png',width = 15, height = 15, units = "in")
genes_chosen <-  which(colnames(rnaseq_hmle_fin) %in% c('GSTM3','IDH2','PYCR1','ME2','GSTP1','GLS','IDH1','GSTO1','ACLY','GSS','GSR'))
boxMets(rnaseq_hmle_fin,genes_chosen,'phenotype','phenotype',common_legend = T) # T-test not yet implemented...
ggsave('STK_TEST2.png',width = 15, height = 15, units = "in")
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
heatmap(cor_mat,symm=T,col=color.palette)
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
# PLOT THE DRUG RESISTANCE:
plot(dd$cluster2,as.numeric(nci60DrugActZ[drugs, c(1:5)]))
# Make dataframe with this:
drug_data <- data.frame(cbind(cluster = dd$cluster2,response= as.numeric(nci60DrugActZ[drugs, c(1:5)])))
View(drug_data)
drug_data[which(drug_data$cluster == -1)] = 2
drug_data$cluster
drug_data$cluster[which(drug_data$cluster == -1)] = 2
drug_data$cluster <- as.factor(drug_data$cluster)
boxMets(drug_data,2,'cluster','cluster')
heyhey_breast
# Make dataframe with this:
drug_data <- data.frame(cbind(cluster = dd$cluster2,response= as.numeric(nci60DrugActZ[drugs, c(1:5)])))
drug_data$cluster[which(drug_data$cluster == -1)] = 'High IDH2'
drug_data$cluster[which(drug_data$cluster == 1)] = 'Low IDH2'
drug_data$cluster <- as.factor(drug_data$cluster)
boxMets(drug_data,2,'cluster','cluster')
# Make dataframe with this:
drug_data <- data.frame(cbind(cluster = dd$cluster2,Sensitivity= as.numeric(nci60DrugActZ[drugs, c(1:5)])))
drug_data$cluster[which(drug_data$cluster == -1)] = 'High IDH2'
drug_data$cluster[which(drug_data$cluster == 1)] = 'Low IDH2'
drug_data$cluster <- as.factor(drug_data$cluster)
boxMets(drug_data,2,'cluster','cluster')
setwd("E:/Dropbox/R_Dropbox/siggitRausti")
library(devtools)
document()
# Then, go with expression in D492 and HMLE models:
install_github('siggitrausti/siggitRausti')
library(siggitRausti)
# Now, show the drug-treatment vs cluster indicator:
fig2 <- boxMets(drug_data,2,'cluster','cluster',y_title = 'Z-score')
fig2
# Now, show the drug-treatment vs cluster indicator:
fig2 <- boxMets(drug_data,2,'cluster','cluster',,common_legend = F,y_title = 'Z-score')
fig2
View(rnaseq_fin2)
View(rnaseq_hmle_fin)
# I need to combine the D492 and HMLE datasets, and make a single graph for each gene
test_match_order(colnames(rnaseq_fin2)[2:ncol(rnaseq_fin2)],colnames(rnaseq_hmle_fin)[2:ncol(rnaseq_hmle_fin)])
rnaseq_ultime <- rbind(rnaseq_fin2,rnaseq_hmle_fin)
View(rnaseq_ultime)
phenotype2 <- c(rep('D492',6),rep('HMLE',18))
phenotype3 <- c(rep('EPI',3),rep('MES',3),rep('EPI',9),rep('MES',9))
rnaseq_ultime <- cbind(model = phenotype2,phenotype_2 = phenotype3,rnaseq_ultime[,2:ncol(rnaseq_ultime)])
View(rnaseq_ultime)
# Now plot:
boxMets(rnaseq_ultime,4,'model','phenotype_2',common_legend = F,y_title = 'Expression')
# Now plot:
boxMets(rnaseq_ultime,4,'phenotype_2','model',common_legend = F,y_title = 'Expression')
# Now plot:
boxMets(rnaseq_ultime,4,'phenotype_2','model',common_legend = T,y_title = 'Expression')
# Now plot:
boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
# NEED TO USE ONLY THE RELATIVE DIFFERENCES, OR LOG-TRANSFORMED RELATIVE DIFFERENCES?
rnaseq_ultime %>% group_by(model) %>%
summarise(value = value[phenotype_2 == "MES"] / value[phenotype_2 == "EPI"])
# NEED TO USE ONLY THE RELATIVE DIFFERENCES, OR LOG-TRANSFORMED RELATIVE DIFFERENCES?
library(dplyr)
rnaseq_ultime %>% group_by(model) %>%
summarise(value = value[phenotype_2 == "MES"] / value[phenotype_2 == "EPI"])
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2 %>% group_by(model) %>%
summarise(MGST1 = MGST1[phenotype_2 == "MES"] / MGST1[phenotype_2 == "EPI"])
rnaseq_ultime2 %>%
spread(phenotype_2, MGST1) %>%
mutate(value = EPI/MES)
library(tidyr)
rnaseq_ultime2 %>%
spread(phenotype_2, MGST1) %>%
mutate(value = EPI/MES)
View(rnaseq_ultime2)
rnaseq_ultime_d492 <- rnaseq_ultime[which(rnaseq_ultime$model == 'D492'),]
rnaseq_ultime_hmle <- rnaseq_ultime[which(rnaseq_ultime$model == 'HMLE'),]
View(rnaseq_ultime_d492)
rnaseq_ultime_d492 %>%
spread(phenotype_2, MGST1) %>%
mutate(value = EPI/MES)
rnaseq_ultime_d492$phenotype_2
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(MGST1 = MGST1[phenotype_2 == "MES"] / value[phenotype_2 == "EPI"])
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(MGST1 = MGST1[phenotype_2 == "MES"] / MGST1[phenotype_2 == "EPI"])
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(value = MGST1[phenotype_2 == "MES"] / MGST1[phenotype_2 == "EPI"])
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(mean)
rnaseq_ultime_d492$MGST1 %>%
group_by(phenotype_2) %>%
summarise(mean)
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(mean)
rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(mean(MGST1))
mgst1_new rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(mean(MGST1))
mgst1_new <-  rnaseq_ultime_d492 %>%
group_by(phenotype_2) %>%
summarise(mean(MGST1))
View(mgst1_new)
# Now plot:
boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)])
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
boxMets(rnaseq_ultime2,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2 <- standardize(rnaseq_ultime2)
warnings()
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- standardize(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)])
#rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
boxMets(rnaseq_ultime2,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime
#rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- standardize(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)])
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
boxMets(rnaseq_ultime2,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,4:9,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,10:15,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,16:21,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,16:20,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,16:19,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,16:18,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,3:5,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,3:8,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,9:14,'model','phenotype_2',common_legend = T,y_title = 'Expression')
boxMets(rnaseq_ultime2,15:18,'model','phenotype_2',common_legend = T,y_title = 'Expression')
chosen_genes <- which(colnames(rnaseq_ultime2) %in% c('IDH1','ME1','ME2','PYCR1','GSTK1','GSTP1'))
boxMets(rnaseq_ultime2,chosen_genes,'model','phenotype_2',common_legend = T,y_title = 'Expression')
fig3 <- boxMets(rnaseq_ultime2,chosen_genes,'model','phenotype_2',common_legend = T,y_title = 'Expression')
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
fig2
# Now plot:
boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
# Now plot:
#boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
chosen_genes <- which(colnames(rnaseq_ultime2) %in% c('IDH1','ME1','ME2','PYCR1','GSTK1','GSTP1'))
fig3 <- boxMets(rnaseq_ultime2,chosen_genes,'model','phenotype_2',common_legend = T,y_title = 'Expression')
fig3
chosen_genes <- which(colnames(rnaseq_ultime2) %in% c('IDH1','ME1','ME2','PYCR1','GSTK1','GSTP1','IDH2'))
fig3 <- boxMets(rnaseq_ultime2,chosen_genes,'model','phenotype_2',common_legend = T,y_title = 'Expression')
fig3
# Now plot:
#boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime[,c(1:6)]
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
fig3 <- boxMets(rnaseq_ultime2,chosen_genes,'phenotype_2','phenotype_2',common_legend = F,y_title = 'Expression')
fig3
chosen_genes <- which(colnames(rnaseq_ultime2) %in% c('IDH1','ME1','ME2','PYCR1','GSTK1','GSTP1','IDH2'))
# Now plot:
#boxMets(rnaseq_ultime,4:6,'model','phenotype_2',common_legend = T,y_title = 'Expression')
rnaseq_ultime2 <- rnaseq_ultime[c(1:6),]
rnaseq_ultime2[,3:ncol(rnaseq_ultime2)] <- log(rnaseq_ultime2[,3:ncol(rnaseq_ultime2)],2)
chosen_genes <- which(colnames(rnaseq_ultime2) %in% c('IDH1','ME1','ME2','PYCR1','GSTK1','GSTP1','IDH2'))
fig3 <- boxMets(rnaseq_ultime2,chosen_genes,'phenotype_2','phenotype_2',common_legend = F,y_title = 'Expression')
fig3
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1 <- heatmap.2(cor_mat,symm=T,col=color.palette)
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1 <- heatmap.2(cor_mat,symm=T,col=color.palette,scale = F)
fig1
heatmap.2(cor_mat)
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
hm = heatmap.2(cor_mat, col=rainbow(4))
eval(hm$call)
fig2
eval(hm$call)
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap(cor_mat, col=color.palette)
fig1 <- eval(fig1_pre$call)
#fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap(cor_mat, col=color.palette)
fig1 <- eval(fig1_pre$call)
#fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap.2(cor_mat, col=color.palette)
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap.2(cor_mat, col=color.palette,tracecol = NA)
fig1 <- eval(fig1_pre$call)
#fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap.2(cor_mat, col=color.palette,tracecol = NA)
fig1 <- eval(fig1_pre$call)
#fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
eval(fig1_pre$call)
fig2
#fig1 <- heatmap(cor_mat,symm=T,col=color.palette)
fig1
func <- function(mat){
h <- heatmap.2(mat, col=color.palette)
h
}
# eval(hm2$call) does not work, 'mat' is not available
fig1 <- func(cor_mat)
fig1
# -------------------------------------------- CREATE A FIGURE PANEL OF RESULTS -----------------------------
# First, create the heatmap of redox genes of interest:
fig1_pre = heatmap.2(cor_mat, col=color.palette,tracecol = NA)
fig1_pre
fig2
fig3
#Plot all together:
p_fin_6 <- grid.arrange(arrangeGrob(fig1,fig2,fig3,ncol=2,nrow=2))
fig1
plot(fig1)
ggcorrplot(cor_mat)
install.packages('ggcorplot')
library(ggcorplot)
install.packages('ggcorrplot')
library(ggcorrplot)
ggcorrplot(cor_mat)
ggcorrplot(cor_mat,hc.order=T)
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black')
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',ggtheme = 'minimal')
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',sig.level = 0.05)
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',sig.level = 0.05,p.mat = T)
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',lab=T)
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',p.mat = p.mat)
p.mat <- res2$P
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black',p.mat = p.mat)
ggcorrplot(cor_mat,hc.order=T,outline.color = 'black')
