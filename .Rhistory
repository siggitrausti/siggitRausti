erpos_pats2 <- erpos_pats
for (i in 1:length(gene_of_interest)){
erpos_pats2[,ncol(erpos_pats2)+1] <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest[i]),id_vec])
colnames(erpos_pats2)[ncol(erpos_pats2)] <- gene_of_interest[i]
}
} else {
erpos_pats2$gene_of_interest <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status')
#format_signature = c('Harmful!','Beneficial!'))
test_zscore
gene_of_interest <- c('ANPEP','GNPNAT1') # ER-positive proteomic signature
## AND NOW FOR THE ER-POSITIVE PATIENTS:
# Create the data:
#erpos_pats <- erpos_pats[which(erpos_pats$survival <= 60),]
erpos_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erpos_pats$patients)]
id_remove <- setdiff(seq(1,nrow(erpos_pats),by=1),which(erpos_pats$patients %in% colnames(erpos_data)))
if(length(id_remove) != 0){
erpos_pats <- erpos_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erpos_pats)){
id_in_rna <- which(colnames(erpos_data) %in% erpos_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
if (length(gene_of_interest != 1)){
erpos_pats2 <- erpos_pats
for (i in 1:length(gene_of_interest)){
erpos_pats2[,ncol(erpos_pats2)+1] <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest[i]),id_vec])
colnames(erpos_pats2)[ncol(erpos_pats2)] <- gene_of_interest[i]
}
} else {
erpos_pats2$gene_of_interest <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status')
#format_signature = c('Harmful!','Beneficial!'))
test_zscore
format_signature = c('Harmful!','Beneficial!'))
test_zscore
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status',
format_signature = c('Harmful!','Beneficial!'))
test_zscore
Create the data:
#erneg_pats <- erneg_pats[which(erneg_pats$survival <= 60),]
erneg_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erneg_pats$patients)]
# If onw wants to use the DFS survial instead of OS, this would have to be run...
#erneg_pats$survival <- erneg_pats$dfs_survival
#erneg_pats$status <- erneg_pats$dfs_status
id_remove <- setdiff(seq(1,nrow(erneg_pats),by=1),which(erneg_pats$patients %in% colnames(erneg_data)))
if(length(id_remove) != 0){
erneg_pats <- erneg_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erneg_pats)){
id_in_rna <- which(colnames(erneg_data) %in% erneg_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
#gene_of_interest <- 'LOC154808' " THIS IS ASL
#gene_of_interest <- 'LOC56960' " THIS IS SLC6A20
gene_of_interest <- c('SUCLG1') # ER-negative proteomic signature
if (length(gene_of_interest != 1)){
erneg_pats2 <- erneg_pats
for (i in 1:length(gene_of_interest)){
erneg_pats2[,ncol(erneg_pats2)+1] <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest[i]),id_vec])
colnames(erneg_pats2)[ncol(erneg_pats2)] <- gene_of_interest[i]
}
} else {
erneg_pats2$gene_of_interest <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore
## AND NOW FOR THE ER-POSITIVE PATIENTS:
# Create the data:
#erpos_pats <- erpos_pats[which(erpos_pats$survival <= 60),]
erpos_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erpos_pats$patients)]
id_remove <- setdiff(seq(1,nrow(erpos_pats),by=1),which(erpos_pats$patients %in% colnames(erpos_data)))
if(length(id_remove) != 0){
erpos_pats <- erpos_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erpos_pats)){
id_in_rna <- which(colnames(erpos_data) %in% erpos_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
if (length(gene_of_interest != 1)){
erpos_pats2 <- erpos_pats
for (i in 1:length(gene_of_interest)){
erpos_pats2[,ncol(erpos_pats2)+1] <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest[i]),id_vec])
colnames(erpos_pats2)[ncol(erpos_pats2)] <- gene_of_interest[i]
}
} else {
erpos_pats2$gene_of_interest <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status',
format_signature = c('Harmful!','Beneficial!'))
test_zscore
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status')
#format_signature = c('Harmful!','Beneficial!'))
test_zscore
library(siggitRausti)
library(survminer)
library(survival)
library(survivalROC)
clinical_data <- read.table('data_bcr_clinical_data_patient.txt',header=T,sep='\t',fill=T)
clin_data <- clinical_data[,c("PATIENT_ID","OS_MONTHS","OS_STATUS","RACE","DFS_MONTHS","DFS_STATUS","AGE","SEX","INITIAL_PATHOLOGIC_DX_YEAR","ER_STATUS_BY_IHC","AJCC_PATHOLOGIC_TUMOR_STAGE",
"HER2_IHC_SCORE")]
clin_data$PATIENT_ID <- gsub("-",".",clin_data$PATIENT_ID)
clin_data$PATIENT_ID <- paste0(clin_data$PATIENT_ID,'.01') # .01 means tumor samples.
# Load RNAseq data (and subtype vector)
#dd_subtype <- readRDS(file = "Subtyped_TCGA_data.rds")
#dd_subtype$ER <- rep(NA,nrow(dd_subtype))
erpos_pats <- data.frame(clin_data$PATIENT_ID[which(clin_data$ER_STATUS_BY_IHC == 'Positive')])
colnames(erpos_pats) <- 'patients'
erneg_pats<- data.frame(clin_data$PATIENT_ID[which(clin_data$ER_STATUS_BY_IHC == 'Negative')])
colnames(erneg_pats) <- 'patients'
id_erpos <- c()
for (i in 1:nrow(erpos_pats)){
id_erpos <- c(id_erpos,which(clin_data$PATIENT_ID %in% erpos_pats$patients[i]))
}
id_erneg <- c()
for (i in 1:nrow(erneg_pats)){
id_erneg <- c(id_erneg,which(clin_data$PATIENT_ID %in% erneg_pats$patients[i]))
}
erpos_pats$age <- as.numeric(as.character(clin_data$AGE[id_erpos]))
erneg_pats$age <- as.numeric(as.character(clin_data$AGE[id_erneg]))
erpos_pats$YEAR_DX <- as.numeric(as.character(clin_data$INITIAL_PATHOLOGIC_DX_YEAR[id_erpos]))
erneg_pats$YEAR_DX <- as.numeric(as.character(clin_data$INITIAL_PATHOLOGIC_DX_YEAR[id_erneg]))
erpos_pats$survival <- as.numeric(as.character(clin_data$OS_MONTHS[id_erpos]))
erneg_pats$survival <- as.numeric(as.character(clin_data$OS_MONTHS[id_erneg]))
erpos_pats$status <- clin_data$OS_STATUS[id_erpos]
erpos_pats$status <- ifelse(erpos_pats$status == 'DECEASED',1,0)
erneg_pats$status <- clin_data$OS_STATUS[id_erneg]
erneg_pats$status <- ifelse(erneg_pats$status == 'DECEASED',1,0)
erpos_pats$dfs_status <- clin_data$DFS_STATUS[id_erpos]
erpos_pats$dfs_status <- ifelse(erpos_pats$dfs_status == 'Recurred/Progressed',1,0)
erneg_pats$dfs_status <- clin_data$DFS_STATUS[id_erneg]
erneg_pats$dfs_status <- ifelse(erneg_pats$dfs_status == 'Recurred/Progressed',1,0)
erpos_pats$dfs_survival <- as.numeric(as.character(clin_data$DFS_MONTHS[id_erpos]))
erneg_pats$dfs_survival <- as.numeric(as.character(clin_data$DFS_MONTHS[id_erneg]))
erpos_pats$ER <- clin_data$ER_STATUS_BY_IHC[id_erpos]
erneg_pats$ER <- clin_data$ER_STATUS_BY_IHC[id_erneg]
erpos_pats$HER2 <- clin_data$HER2_IHC_SCORE[id_erpos]
erneg_pats$HER2 <- clin_data$HER2_IHC_SCORE[id_erneg]
erneg_pats$HER2[which(erneg_pats$HER2 == '[Not Available]')] <- NA
erpos_pats$HER2[which(erpos_pats$HER2 == '[Not Available]')] <- NA
erneg_pats$HER2 <- as.factor(erneg_pats$HER2)
erpos_pats$HER2 <- as.factor(erpos_pats$HER2)
vsd_tcga <- readRDS(file = 'TCGA_data_whole_vst_transformed_170519.rds') # NON-z-sscored TCGA data (but normalized)
# Create the data:
#erneg_pats <- erneg_pats[which(erneg_pats$survival <= 60),]
erneg_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erneg_pats$patients)]
id_remove <- setdiff(seq(1,nrow(erneg_pats),by=1),which(erneg_pats$patients %in% colnames(erneg_data)))
if(length(id_remove) != 0){
erneg_pats <- erneg_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erneg_pats)){
id_in_rna <- which(colnames(erneg_data) %in% erneg_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
gene_of_interest <- c('RENBP') # ER-negative proteomic signature
if (length(gene_of_interest != 1)){
erneg_pats2 <- erneg_pats
for (i in 1:length(gene_of_interest)){
erneg_pats2[,ncol(erneg_pats2)+1] <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest[i]),id_vec])
colnames(erneg_pats2)[ncol(erneg_pats2)] <- gene_of_interest[i]
}
} else {
erneg_pats2$gene_of_interest <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore
gene_of_interest <- c('RENBP','SLC16A10') # ER-positive proteomic signature
if (length(gene_of_interest != 1)){
erneg_pats2 <- erneg_pats
for (i in 1:length(gene_of_interest)){
erneg_pats2[,ncol(erneg_pats2)+1] <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest[i]),id_vec])
colnames(erneg_pats2)[ncol(erneg_pats2)] <- gene_of_interest[i]
}
} else {
erneg_pats2$gene_of_interest <- as.numeric(erneg_data[which(rownames(erneg_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore
## AND NOW FOR THE ER-POSITIVE PATIENTS:
# Create the data:
#erpos_pats <- erpos_pats[which(erpos_pats$survival <= 60),]
erpos_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erpos_pats$patients)]
id_remove <- setdiff(seq(1,nrow(erpos_pats),by=1),which(erpos_pats$patients %in% colnames(erpos_data)))
if(length(id_remove) != 0){
erpos_pats <- erpos_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erpos_pats)){
id_in_rna <- which(colnames(erpos_data) %in% erpos_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
if (length(gene_of_interest != 1)){
erpos_pats2 <- erpos_pats
for (i in 1:length(gene_of_interest)){
erpos_pats2[,ncol(erpos_pats2)+1] <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest[i]),id_vec])
colnames(erpos_pats2)[ncol(erpos_pats2)] <- gene_of_interest[i]
}
} else {
erpos_pats2$gene_of_interest <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status')
#format_signature = c('Harmful!','Beneficial!'))
test_zscore
#format_signature = c('Harmful!','Harmful!'))
test_zscore + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER-', size = 8)
#format_signature = c('Harmful!','Harmful!'))
test_zscore$plot + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER-', size = 8)
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore$plot + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER-', size = 8
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore$plot + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER-', size = 8)
View(surv_cutpoint_multiple)
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erneg_pats2,features = gene_of_interest,time = 'survival',
event = 'status',minprop = 0.2)
#format_signature = c('Harmful!','Harmful!'))
test_zscore$plot + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER-', size = 8)
erpos_data <- vsd_tcga[,which(colnames(vsd_tcga) %in% erpos_pats$patients)]
# If onw wants to use the DFS survial instead of OS, this would have to be run...
#erpos_pats$survival <- erpos_pats$dfs_survival
#erpos_pats$status <- erpos_pats$dfs_status
id_remove <- setdiff(seq(1,nrow(erpos_pats),by=1),which(erpos_pats$patients %in% colnames(erpos_data)))
if(length(id_remove) != 0){
erpos_pats <- erpos_pats[-id_remove,]
}
id_vec <- c()
for (i in 1:nrow(erpos_pats)){
id_in_rna <- which(colnames(erpos_data) %in% erpos_pats$patients[i])
id_vec <- c(id_vec,id_in_rna)
}
if (length(gene_of_interest != 1)){
erpos_pats2 <- erpos_pats
for (i in 1:length(gene_of_interest)){
erpos_pats2[,ncol(erpos_pats2)+1] <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest[i]),id_vec])
colnames(erpos_pats2)[ncol(erpos_pats2)] <- gene_of_interest[i]
}
} else {
erpos_pats2$gene_of_interest <- as.numeric(erpos_data[which(rownames(erpos_data) %in% gene_of_interest),id_vec])
}
source('./surv_cutpoint_multiple.R')
test_zscore <- surv_cutpoint_multiple(erpos_pats2,features = gene_of_interest,time = 'survival',
event = 'status')
#format_signature = c('Harmful!','Beneficial!'))
test_zscore$plot + ggplot2::annotate("text",
x = 11, y = 0.28, # x and y coordinates of the text
label = 'ER+', size = 8)
# Utilize a regularized regression analysis. Log-transform highly-skewed response variables before.
library(siggitRausti)
library(BiocManager)
library(xcms)
library(CAMERA)
library(stringr)
library(stats)
library(NormalizeMets)
library(sva)
library(glmnet)
library(mlr)
library(pROC)
library(WGCNA)
library(gplots)
library(car)
setwd('E:/Dropbox/R_Dropbox')
source("./FJfunctions/loadAll.r")
loadAll()
setwd('E:/Dropbox/R_Dropbox/Trauma_untargeted_FEB2020/')
load('Trauma_workspace_JUNE2020.Rdata')
load('Annotation_matrix_metabolomics_POS_JUNE2020.Rda')
load('Annotation_matrix_metabolomics_NEG_JUNE2020.Rda')
load('Annotation_matrix_metabolomics_T3POS_JUNE2020.Rda')
load('Mapping_vector_for_neg_lipidomics_APRIL2020.Rda')
map_mat_neg_lipids <- map_mat
load('Mapping_vector_for_pos_lipidomics_APRIL2020.Rda')
map_mat_pos_lipids <- map_mat
load('Negative_lipidomic_data_PROCESSED_APRIL2020.Rda')
load('Positive_lipidomic_data_PROCESSED_APRIL2020.Rda')
#csb_pos <- read.csv('CSB-mass-db-POS.csv')
#csb_neg <- read.csv('CSB-mass-db-ACID.csv')
csb_pos <- read_excel('Freyr_CSB_inhouse_data.xlsx','In CC POS')
csb_pos <- csb_pos[,c(1,2,7,8)]
colnames(csb_pos) <- c('Identity','m.z','RTmin','RTmax')
for (i in 2:ncol(csb_pos)){
csb_pos[,i] <- as.numeric(unlist(csb_pos[,i]))
}
csb_pos <- csb_pos[complete.cases(csb_pos),]
csb_pos$Retention.time..min. <- NA
for (i in 1:nrow(csb_pos)){
csb_pos$Retention.time..min.[i] <- mean(as.numeric(csb_pos[i,c(3,4)]))
}
csb_neg <- read_excel('Freyr_CSB_inhouse_data.xlsx','In CC neg Acid')
csb_neg <- csb_neg[,c(1,2,7,8)]
colnames(csb_neg) <- c('Identity','m.z','RTmin','RTmax')
for (i in 2:ncol(csb_neg)){
csb_neg[,i] <- as.numeric(unlist(csb_neg[,i]))
}
csb_neg <- csb_neg[complete.cases(csb_neg),]
csb_neg$Retention.time..min. <- NA
for (i in 1:nrow(csb_neg)){
csb_neg$Retention.time..min.[i] <- mean(as.numeric(csb_neg[i,c(3,4)]))
}
#######################################################################################################################
# Remove modules where the top 50% of the module members do not have any annotations:
#######################################################################################################################
# Choose number of hubs I want to check:
fraction_hub <- 0.15
# NOTE: NEED TO ALTER THIS CODE. DESPITE HIGH KME VALUES, IT DEPENDS ON THE FEATURES' VALUES IN OTHER
# MODULES WHAT MODULE THEY ACTUALLY BELONG TO.....
# I NEED TO ALTER THE CODE SO THAT A FRACTION OF THE MEMBERS (AS DESCRIBED BY THE NAMES OF THE PROT3/MERGEDCOLORS2 VECTOR)
no_annotations_modules <- c()
for (o in 1:ncol(MEs)){
module_annotations <- c()
modules_of_interest <- colnames(MEs)[o]
datKME=signedKME(prot3, MEs, outputColumnName="MM.")
hub_genes <- c()
hub_no <- c()
for (i in 1:length(modules_of_interest)){
temp_name <- paste0('MM.',substring(modules_of_interest[i],3))
module_members = names(prot3)[mergedColors2==substring(modules_of_interest[i],3)]
id_members <- which(rownames(datKME) %in% module_members)
id_name <- which(colnames(datKME) %in% temp_name)
if (length(id_name) != 0){
temp_kme_vec <- datKME[id_members,id_name]
hub_no <- c(hub_no,ceiling(length(temp_kme_vec)*fraction_hub))
top_frac_vals <- nth_highest_val(temp_kme_vec,1:ceiling(length(temp_kme_vec)*fraction_hub))
hub_met <- rownames(datKME)[which(datKME[,id_name] %in% top_frac_vals)]
hub_genes <- c(hub_genes,hub_met)
}
}
#hub_genes
#hub_no
#hub_no_values <- seq(1,hub_no*length(modules_of_interest),by = hub_no)
hub_no_values <- c(1)
for (i in 1:length(hub_no)-1){
hub_no_values <- c(hub_no_values,hub_no_values[i] + hub_no[i])
#hub_no_values <- c(hub_no_values,hub_no_temp)
}
for (i in 1:length(hub_genes)){
if (i %in% hub_no_values){
id_in_hub_no_values <- which(hub_no_values %in% i)
print('_____________________________________________________________')
print(paste0('For Module ',modules_of_interest[id_in_hub_no_values]))
}
type = origin_of_data[which(colnames(prot3) %in% hub_genes[i])]
if (type == 'Negative'){
numeric_val <- as.numeric(substring(hub_genes[i],2))
rt_val_min <- neg_info2$RT_min[which(neg_info2$NAMES %in% hub_genes[i])]
rt_val_max <- neg_info2$RT_max[which(neg_info2$NAMES %in% hub_genes[i])]
id_in_house <- which(abs((csb_neg$m.z - numeric_val)/numeric_val)*1000000 < 10 ) # within 10 ppm.
id_in_house2 <- which(csb_neg$Retention.time..min.*60 > rt_val_min-20 & csb_neg$Retention.time..min.*60 < rt_val_max+20)
id_in_house_fin <- intersect(id_in_house,id_in_house2)
if (length(id_in_house_fin) != 0){
val <- csb_neg$Identity[id_in_house_fin]
} else {
val = neg_info2$IDs[which(neg_info2$NAMES %in% hub_genes[i])]
}
} else if (type == 'Positive'){
numeric_val <- as.numeric(substring(hub_genes[i],2))
rt_val_min <- pos_info2$RT_min[which(pos_info2$NAMES %in% hub_genes[i])]
rt_val_max <- pos_info2$RT_max[which(pos_info2$NAMES %in% hub_genes[i])]
id_in_house <- which(abs((csb_pos$m.z - numeric_val)/numeric_val)*1000000 < 10 ) # within 10 ppm.
id_in_house2 <- which(csb_pos$Retention.time..min.*60 > rt_val_min-20 & csb_pos$Retention.time..min.*60 < rt_val_max+20)
id_in_house_fin <- intersect(id_in_house,id_in_house2)
if (length(id_in_house_fin) != 0){
val <- csb_pos$Identity[id_in_house_fin]
} else {
val = pos_info2$IDs[which(pos_info2$NAMES %in% hub_genes[i])]
}
} else if (type == 'HSS_T3'){
val = t3pos_info2$IDs[which(t3pos_info2$NAMES %in% hub_genes[i])]
if (length(val) == 0){
val = t3pos_info2$IDs[which(t3pos_info2$NAMES %in% substr(hub_genes[i],1,nchar(hub_genes[i])-2))]
}
} else if (type == 'Neg_Lipids'){
val_temp <- which(map_mat_neg_lipids$X1 %in% substr(hub_genes[i],1,nchar(hub_genes[i])-4))
if (length(val_temp) != 0){
val = map_mat_neg_lipids$X2[val_temp]
} else {
val = NA
}
} else if (type == 'Pos_Lipids'){
val_temp <- which(map_mat_pos_lipids$X1 %in% substr(hub_genes[i],1,nchar(hub_genes[i])-4))
if (length(val_temp) != 0){
val = map_mat_pos_lipids$X2[val_temp]
} else {
val = NA
}
}
module_annotations <- c(module_annotations,val)
#print(paste0('Type: ',type,' - ID: ',val, ' from mass: ', hub_genes[i]))
}
if (all(is.na(module_annotations),na.rm=T)){
no_annotations_modules <- c(no_annotations_modules,modules_of_interest)
}
}
MEs <- MEs[,-which(colnames(MEs) %in% no_annotations_modules)]
# Manually remove hubs with no meaningful annotations (just annotated as drugs or something else):
remove_modules <- c('MEthistle3','MEskyblue','MEplum','MEmediumpurple3',
'MElightyellow', 'MElightgreen','MElightcyan1',
'MElavenderblush3','MEgreenyellow','MEfloralwhite',
'MEfirebrick4','MEdarkviolet','MElightpink4','MEpaleturquoise','MEdarkturquoise')
MEs <- MEs[,-which(colnames(MEs) %in% remove_modules)]
#######################################################################################################################
# Load data #
#######################################################################################################################
# Load new houston data from Hanne:
houston_meta <- read_excel('Houston data (n = 99).xlsx')
houston_meta <- data.frame(houston_meta)
rownames(houston_meta) <- make.names(houston_meta$ID.CETIR)
# Calculate survival time and add to the dataframe:
survival_time <- rep(NA,nrow(houston_meta))
for (i in 1:nrow(houston_meta)){
if (!is.na(houston_meta$Timebeforedeath[i])){
survival_time[i] <- as.numeric(strsplit(houston_meta$Timebeforedeath[i],':')[[1]][1])*60 + as.numeric(strsplit(houston_meta$Timebeforedeath[i],':')[[1]][2])
survival_time[i] <- signif(survival_time[i]/60,3)
}
}
na_no <- rep(NA,ncol(houston_meta))
for (i in 1:ncol(houston_meta)){
#missing_no[i] = length(which(houston_meta[,i] == 'Missing'))
na_no[i] <- length(which(is.na(houston_meta[,i])))
}
id_remove2 <- which(na_no > 0.25*nrow(houston_meta))
houston_meta <- houston_meta[,-id_remove2]
houston_meta <- data.frame(houston_meta)
houston_meta$survival <- survival_time
cleandat <- prot3[which(rownames(prot3) %in% make.names(houston_meta$ID.CETIR)),]
id_vec <- c()
for (i in 1:nrow(cleandat)){
id_temp <- which(make.names(houston_meta$ID.CETIR) %in% rownames(cleandat)[i])
if (length(id_temp) == 0){
print(paste0('Missing value for ',rownames(cleandat)[i]))
} else {
id_vec <- c(id_vec,id_temp)
}
}
# Now just use the metadata, along with the untargeted data, to perform some modeling:
houston_fin <- cbind(houston_meta[id_vec,],cleandat)
houston_fin <- houston_fin[,-c(14,15,17,18)]
houston_for_traits <- houston_fin[,-c(1:5,12,16:21,31:46,48:ncol(houston_fin))]
traits <- houston_for_traits
# Check which trait variables aree correlated (to remove from further anaylysis):
traits2 <- traits[complete.cases(traits),]
cormat<-signif(cor(traits2),2)
cormat
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(cormat, col=col, symm=TRUE)
library(caret)
colnames(traits2)[findCorrelation(cormat,cutoff = 0.7)] # Totally arbitrary
traits <- traits[,-findCorrelation(cormat,cutoff = 0.7)]
#missing_pat <- setdiff(rownames(prot3),rownames(traits))
#prot4 <- prot3[-which(rownames(prot3) %in% missing_pat),]
test_match_order(rownames(prot3),rownames(traits))
#######################################################################################################################
# 1. Metabolite Regression Analysis #
#######################################################################################################################
set.seed(124)
houston_regression <- data.frame(cbind(Response = houston_fin$Adr,Age = houston_fin$AGE,BMI = houston_fin$BMI,
BE = houston_fin$BE,Sex = houston_fin$SEX,MEs))
#houston_regression <- data.frame(cbind(Response = houston_fin$EoT,Dummy = rep(0,nrow(houston_fin)),houston_fin[,c(49:ncol(houston_fin))]))
#houston_regression <- data.frame(cbind(Response = houston_fin$EoT,Dummy = rep(0,nrow(houston_fin)),MEs))
#houston_regression$Response <- as.factor(houston_regression$Response)
#metPCA(houston_regression,groups = 'Response',CI = T,scale = 'auto',center =T,pcs = c(1,2),scree = T,corplot = T)
#houston_regression$Sex <- as.factor(houston_regression$Sex)
#houston_regression <- data.frame(cbind(Response = houston_fin$Adr,Age = houston_fin$AGE,BMI = houston_fin$BMI,
#                                       Sex = houston_fin$SEX,cleandat))
hist(houston_regression$Response)
houston_regression$Response <- log(houston_regression$Response,2)
hist(houston_regression$Response)
box_mets(houston_fin,which(colnames(houston_fin) %in% 'Adr'),'EoT','EoT')
library(devtools)
setwd("E:/Dropbox/R_Dropbox/siggitRausti")
document()
