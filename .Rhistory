drugAct_2 <- drugAct
colnames(met_means2) <- gsub('Breast_','BR.',colnames(met_means2))
colnames(met_means2) <- gsub('CNS_','CNS.',colnames(met_means2))
colnames(met_means2) <- gsub('Colon_','CO.',colnames(met_means2))
colnames(met_means2) <- gsub('Lung_','LC.',colnames(met_means2))
colnames(met_means2) <- gsub('Melanoma_','ME.',colnames(met_means2))
colnames(met_means2) <- gsub('Ovarian_','OV.',colnames(met_means2))
colnames(met_means2) <- gsub('Prostate_','PR.',colnames(met_means2))
colnames(met_means2) <- gsub('Renal_','RE.',colnames(met_means2))
colnames(met_means2) <- gsub('\\.','',colnames(met_means2))
#rownames(heyhey2) <- gsub('\\.','',rownames(heyhey2))
colnames(drugAct_2) <- gsub('\\.','',colnames(drugAct_2))
# Extract only FDA-approved drugs:
drugAnnot <- getFeatureAnnot(rcellminerData::drugData)[["drug"]]
tmpDA <- drugAnnot[drugAnnot$FDA_STATUS != "-", c("NSC", "FDA_STATUS")]
# See if the ratio of oxidizes to non-oxidized is the case:
tmpDrugAct <- drugAct_2[rownames(drugAct_2) %in% tmpDA$NSC,]
# take 10 random genes from the met_means, and check the correlation with drugs:
percentage_drugs_neg_assoc <- rep(NA,dim(met_means2)[1])
#for (o in 1:dim(met_means2)[1]){
mean_glut2 <- data.frame(met_means2[grep('Proline',met_means$Annotation,ignore.case = T)[1],])
#mean_glut2 <- data.frame(met_means2[which(met_means$Annotation %in% '2-Oxoglutarate ; Oxoglutaric acid'),])
#mean_glut2_3 <- data.frame(met_means2[which(met_means$Annotation %in% '3-Ureidoisobutyrate ; Alanylglycine ; D-Glutamine ; Glycylsarcosine ; L-Glutamine ; L-glutamine ; Ureidoisobutyric acid'),])
#mean_glut2 <- data.frame(met_means2[o,])
mean_glut3 <- data.frame(met_means2[grep('Glutathione',met_means$Annotation,ignore.case = T)[1],])
#mean_glut3 <- data.frame(met_means2[ids_chosen2[487],])
mean_glut2 <- mean_glut2[,-c(1,2,4,5)]
mean_glut3 <- mean_glut3[,-c(1,2,4,5)]
#mean_glut2_2 <- mean_glut2_2[,-c(1,2,4,5)]
#mean_glut2_3 <- mean_glut2_3[,-c(1,2,4,5)]
mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3)))
#mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3,mean_glut2_2,mean_glut2_3)))
#colnames(mean_glut4) <- unlist(mean_glut4[1,])
colnames(mean_glut4) <- c('Proline','GSH')
mean_glut4 <- mean_glut4[-1,]
mean_glut4$Proline <- as.numeric(as.character(mean_glut4$Proline))
mean_glut4$GSH <- as.numeric(as.character(mean_glut4$GSH))
#mean_glut4$OAA <- as.numeric(as.character(mean_glut4$OAA))
#mean_glut4$Glutamate <- as.numeric(as.character(mean_glut4$Glutamate))
mean_glut4 <- mean_glut4[complete.cases(mean_glut4),]
mean_glut4 <- cbind(mean_glut4,Ratio = rep(0,nrow(mean_glut4)))
for (i in 1:nrow(mean_glut4)){
#mean_glut4$Ratio[i] <- mean_glut4$Proline[i]/mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- mean_glut4$OAA[i]/mean_glut4$Glutamate[i]
mean_glut4$Ratio[i] <- mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- (mean_glut4$Proline[i]*(mean_glut4$OAA[i]/mean_glut4$Glutamate))/mean_glut4$GSH[i]
}
cell_type_vec <- rep(0,nrow(mean_glut4))
for (k in 1:nrow(mean_glut4)){
cell_type_vec[k] <- substr(rownames(mean_glut4)[k],start=1,stop=2)
}
mean_glut4 <- data.frame(cbind(mean_glut4,cell_type = cell_type_vec))
mean_glut4$cell_type <- as.factor(mean_glut4$cell_type)
# ADDED 04.01.20: MAKE THE DISTRIBUTION LINEAR BEFORE DOING THE LINEAR REGRESSION:
p_vec <- rep(0,nrow(tmpDrugAct))
coef_vec <- rep(0,nrow(tmpDrugAct))
for (j in 1:nrow(tmpDrugAct)){
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[j,id_in_glut],na.rm=T)
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
#mean_glut5$Ratio <- rankNorm(mean_glut5$Ratio)
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
#mean_glut5$Drug.efficacy <- rankNorm(mean_glut5$Drug.efficacy)
if (dim(mean_glut5)[1] != 0){
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
temp_p <- coef(summary(model_1))[,4][2]
coef_vec[j] <- coef(summary(model_1))[,1][2]
p_vec[j] <- temp_p
} else {
coef_vec[j] <- NA
p_vec[j] <- NA
}
rm(model_1)
}
#p_vec2 <- p.adjust(p_vec,'BH',length(p_vec))
#rownames(drugAct_2)[which(p_vec2 < 0.05)]
#drugs_sign <- data.frame(rcellminer::getDrugName(rownames(drugAct_2)[which(p_vec < 0.05 & coef_vec > 0)]))
drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.05 & coef_vec > 0)]))
View(drugs_sign)
#p_vec2 <- p.adjust(p_vec,'BH',length(p_vec))
#rownames(drugAct_2)[which(p_vec2 < 0.05)]
#drugs_sign <- data.frame(rcellminer::getDrugName(rownames(drugAct_2)[which(p_vec < 0.05 & coef_vec > 0)]))
drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.05 & coef_vec < 0)]))
View(drugs_sign)
#p_vec2 <- p.adjust(p_vec,'BH',length(p_vec))
#rownames(drugAct_2)[which(p_vec2 < 0.05)]
#drugs_sign <- data.frame(rcellminer::getDrugName(rownames(drugAct_2)[which(p_vec < 0.05 & coef_vec > 0)]))
drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.0001 & coef_vec < 0)]))
#drug_of_interest <- 'Rapamycin'
# Plot for drug of interest:
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
if (length(id_in_glut) == 0){
mean_glut5$Drug.efficacy[i] <- NA
} else {
#mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[which(rownames(tmpDrugAct) %in% as.character(searchForNscs(drug_of_interest))),id_in_glut],na.rm=T)
mean_glut5$Drug.efficacy[i] <- tmpDrugAct[which(rownames(tmpDrugAct) %in% '697286'),id_in_glut]
}
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
#mean_glut5$Ratio <- rankNorm(mean_glut5$Ratio)
#mean_glut5$Drug.efficacy <- rankNorm(mean_glut5$Drug.efficacy)
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
# PLOT:
new = data.frame(mean_glut5$Ratio,mean_glut5$cell_type)
colnames(new) <- c('Ratio','cell_type')
mean_glut5$predicted_vals <- predict(model_1,type = 'response')
mean_glut5$only_drug <- coef(model_1)[2]*mean_glut5$Ratio + coef(model_1)[1]
p <- ggplot(mean_glut5, aes(x = Ratio, y = Drug.efficacy) ) +
geom_point() +
geom_line(aes(y = only_drug), size = 1,color='red')
# Plot beautifully:
p2 <- plotLookForPaper(p,'Drug efficacy','Log(Pro/GSH)') +
theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10))
p2
p2
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
which(mean_glut5$Drug.efficacy > 3)
# Take out outliers:
mean_glut5 <- mean_glut5[-which(mean_glut5$Drug.efficacy > 3),]
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
# PLOT:
new = data.frame(mean_glut5$Ratio,mean_glut5$cell_type)
colnames(new) <- c('Ratio','cell_type')
mean_glut5$predicted_vals <- predict(model_1,type = 'response')
mean_glut5$only_drug <- coef(model_1)[2]*mean_glut5$Ratio + coef(model_1)[1]
p <- ggplot(mean_glut5, aes(x = Ratio, y = Drug.efficacy) ) +
geom_point() +
geom_line(aes(y = only_drug), size = 1,color='red')
# Plot beautifully:
p2 <- plotLookForPaper(p,'Drug efficacy','Log(Pro/GSH)') +
theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10))
p2
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
hist(mean_glut5$Drug.efficacy)
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
if (length(id_in_glut) == 0){
mean_glut5$Drug.efficacy[i] <- NA
} else {
#mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[which(rownames(tmpDrugAct) %in% as.character(searchForNscs(drug_of_interest))),id_in_glut],na.rm=T)
mean_glut5$Drug.efficacy[i] <- tmpDrugAct[which(rownames(tmpDrugAct) %in% '697286'),id_in_glut]
}
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
hist(mean_glut5$Drug.efficacy)
# Take out outliers:
mean_glut5 <- mean_glut5[-which(mean_glut5$Drug.efficacy > 3),]
model_1 <- lm(Drug.efficacy ~ Ratio,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
View(mean_glut5)
mean_glut5$cell_type[28]
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
if (length(id_in_glut) == 0){
mean_glut5$Drug.efficacy[i] <- NA
} else {
#mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[which(rownames(tmpDrugAct) %in% as.character(searchForNscs(drug_of_interest))),id_in_glut],na.rm=T)
mean_glut5$Drug.efficacy[i] <- tmpDrugAct[which(rownames(tmpDrugAct) %in% '697286'),id_in_glut]
}
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
# Take out outliers:
#mean_glut5 <- mean_glut5[-which(mean_glut5$Drug.efficacy > 3),]
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
# PLOT:
new = data.frame(mean_glut5$Ratio,mean_glut5$cell_type)
colnames(new) <- c('Ratio','cell_type')
mean_glut5$predicted_vals <- predict(model_1,type = 'response')
mean_glut5$only_drug <- coef(model_1)[2]*mean_glut5$Ratio + coef(model_1)[1]
p <- ggplot(mean_glut5, aes(x = Ratio, y = Drug.efficacy) ) +
geom_point() +
geom_line(aes(y = only_drug), size = 1,color='red')
# Plot beautifully:
p2 <- plotLookForPaper(p,'Drug efficacy','Log(Pro/GSH)') +
theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10))
p2
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels') + theme(panel.grid.major.y = element_line(color='grey'))
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
outp1 + theme(panel.grid.major.y = element_line(color='grey'))
outp1
colnames(mean_glut_box)[3] <- 'Glutathione'
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'GSH levels')
outp1
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)')
outp1
ggsave('GSH_abundance_LY294002_JAN2020.png',width = 6, height = 6, units = "in")
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
ggsave('GSH_abundance_LY294002_JAN2020.png',width = 6, height = 6, units = "in")
outp1 +theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=14),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1 <- outp1 + theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=14),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1
outp1 <- outp1 + theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=1),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1 <- outp1 + theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=14),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1 <- outp1 + theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=14),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1
setwd("E:/Dropbox/R_Dropbox/13C_analysis_and_IDH2_SEPT2019")
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
source('./boxMets2.R')
library(rcellminer)
library(rcellminerData)
library(Hmisc)
library(devtools)
library(factoextra)
library(NbClust)
library(siggitRausti)
library(ggcorrplot)
library(dplyr)
library(RNOmni)
library(gplots)
setwd('E:/Dropbox/R_Dropbox')
source("./FJfunctions/loadAll.r")
loadAll()
setwd('E:/Dropbox/R_Dropbox/13C_analysis_and_IDH2_SEPT2019/')
met_means <- read_excel('41467_2019_9695_MOESM2_ESM.xlsx','Met_alpha','A1:BG2185')
met_sds <- read_excel('41467_2019_9695_MOESM2_ESM.xlsx','Met_alpha_SE','A1:BG2185')
colnames(met_means) <- unlist(as.character(met_means[3,]))
colnames(met_sds) <- unlist(as.character(met_sds[3,]))
met_means <- met_means[-c(1:3),]
met_sds <- met_sds[-c(1:3),]
# NEED TO COMPARE THIS TO DRUG EFFICACY LEVELS IN NCI60
# Change name of tissues so that they will match:
met_means2 <- met_means
drugAct <- exprs(getAct(rcellminerData::drugData))
drugAct <- data.frame(drugAct)
drugAct_2 <- drugAct
colnames(met_means2) <- gsub('Breast_','BR.',colnames(met_means2))
colnames(met_means2) <- gsub('CNS_','CNS.',colnames(met_means2))
colnames(met_means2) <- gsub('Colon_','CO.',colnames(met_means2))
colnames(met_means2) <- gsub('Lung_','LC.',colnames(met_means2))
colnames(met_means2) <- gsub('Melanoma_','ME.',colnames(met_means2))
colnames(met_means2) <- gsub('Ovarian_','OV.',colnames(met_means2))
colnames(met_means2) <- gsub('Prostate_','PR.',colnames(met_means2))
colnames(met_means2) <- gsub('Renal_','RE.',colnames(met_means2))
colnames(met_means2) <- gsub('\\.','',colnames(met_means2))
#rownames(heyhey2) <- gsub('\\.','',rownames(heyhey2))
colnames(drugAct_2) <- gsub('\\.','',colnames(drugAct_2))
# Extract only FDA-approved drugs:
drugAnnot <- getFeatureAnnot(rcellminerData::drugData)[["drug"]]
tmpDA <- drugAnnot[drugAnnot$FDA_STATUS != "-", c("NSC", "FDA_STATUS")]
# See if the ratio of oxidizes to non-oxidized is the case:
tmpDrugAct <- drugAct_2[rownames(drugAct_2) %in% tmpDA$NSC,]
# take 10 random genes from the met_means, and check the correlation with drugs:
percentage_drugs_neg_assoc <- rep(NA,dim(met_means2)[1])
#for (o in 1:dim(met_means2)[1]){
mean_glut2 <- data.frame(met_means2[grep('Proline',met_means$Annotation,ignore.case = T)[1],])
#mean_glut2 <- data.frame(met_means2[which(met_means$Annotation %in% '2-Oxoglutarate ; Oxoglutaric acid'),])
#mean_glut2_3 <- data.frame(met_means2[which(met_means$Annotation %in% '3-Ureidoisobutyrate ; Alanylglycine ; D-Glutamine ; Glycylsarcosine ; L-Glutamine ; L-glutamine ; Ureidoisobutyric acid'),])
#mean_glut2 <- data.frame(met_means2[o,])
mean_glut3 <- data.frame(met_means2[grep('Glutathione',met_means$Annotation,ignore.case = T)[1],])
#mean_glut3 <- data.frame(met_means2[ids_chosen2[487],])
mean_glut2 <- mean_glut2[,-c(1,2,4,5)]
mean_glut3 <- mean_glut3[,-c(1,2,4,5)]
#mean_glut2_2 <- mean_glut2_2[,-c(1,2,4,5)]
#mean_glut2_3 <- mean_glut2_3[,-c(1,2,4,5)]
mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3)))
#mean_glut4 <- data.frame(t(rbind(mean_glut2,mean_glut3,mean_glut2_2,mean_glut2_3)))
#colnames(mean_glut4) <- unlist(mean_glut4[1,])
colnames(mean_glut4) <- c('Proline','GSH')
mean_glut4 <- mean_glut4[-1,]
mean_glut4$Proline <- as.numeric(as.character(mean_glut4$Proline))
mean_glut4$GSH <- as.numeric(as.character(mean_glut4$GSH))
#mean_glut4$OAA <- as.numeric(as.character(mean_glut4$OAA))
#mean_glut4$Glutamate <- as.numeric(as.character(mean_glut4$Glutamate))
mean_glut4 <- mean_glut4[complete.cases(mean_glut4),]
mean_glut4 <- cbind(mean_glut4,Ratio = rep(0,nrow(mean_glut4)))
for (i in 1:nrow(mean_glut4)){
#mean_glut4$Ratio[i] <- mean_glut4$Proline[i]/mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- mean_glut4$OAA[i]/mean_glut4$Glutamate[i]
mean_glut4$Ratio[i] <- mean_glut4$GSH[i]
#mean_glut4$Ratio[i] <- (mean_glut4$Proline[i]*(mean_glut4$OAA[i]/mean_glut4$Glutamate))/mean_glut4$GSH[i]
}
cell_type_vec <- rep(0,nrow(mean_glut4))
for (k in 1:nrow(mean_glut4)){
cell_type_vec[k] <- substr(rownames(mean_glut4)[k],start=1,stop=2)
}
mean_glut4 <- data.frame(cbind(mean_glut4,cell_type = cell_type_vec))
mean_glut4$cell_type <- as.factor(mean_glut4$cell_type)
# ADDED 04.01.20: MAKE THE DISTRIBUTION LINEAR BEFORE DOING THE LINEAR REGRESSION:
p_vec <- rep(0,nrow(tmpDrugAct))
coef_vec <- rep(0,nrow(tmpDrugAct))
for (j in 1:nrow(tmpDrugAct)){
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[j,id_in_glut],na.rm=T)
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
#mean_glut5$Ratio <- rankNorm(mean_glut5$Ratio)
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
#mean_glut5$Drug.efficacy <- rankNorm(mean_glut5$Drug.efficacy)
if (dim(mean_glut5)[1] != 0){
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
temp_p <- coef(summary(model_1))[,4][2]
coef_vec[j] <- coef(summary(model_1))[,1][2]
p_vec[j] <- temp_p
} else {
coef_vec[j] <- NA
p_vec[j] <- NA
}
rm(model_1)
}
#p_vec2 <- p.adjust(p_vec,'BH',length(p_vec))
#rownames(drugAct_2)[which(p_vec2 < 0.05)]
#drugs_sign <- data.frame(rcellminer::getDrugName(rownames(drugAct_2)[which(p_vec < 0.05 & coef_vec > 0)]))
drugs_sign <- data.frame(rcellminer::getDrugName(rownames(tmpDrugAct)[which(p_vec < 0.0001 & coef_vec < 0)]))
View(drugs_sign)
mean_glut5 <- data.frame(cbind(mean_glut4,Drug.efficacy = rep(0,nrow(mean_glut4))))
for (i in 1:nrow(mean_glut5)){
id_in_glut <- which(colnames(tmpDrugAct) %in% rownames(mean_glut5)[i])
if (length(id_in_glut) == 0){
mean_glut5$Drug.efficacy[i] <- NA
} else {
#mean_glut5$Drug.efficacy[i] <- mean(tmpDrugAct[which(rownames(tmpDrugAct) %in% as.character(searchForNscs(drug_of_interest))),id_in_glut],na.rm=T)
mean_glut5$Drug.efficacy[i] <- tmpDrugAct[which(rownames(tmpDrugAct) %in% '697286'),id_in_glut]
}
}
mean_glut5 <- mean_glut5[complete.cases(mean_glut5),]
mean_glut5$Ratio <- log(mean_glut5$Ratio,10)
# Take out outliers:
#mean_glut5 <- mean_glut5[-which(mean_glut5$Drug.efficacy > 3),]
model_1 <- lm(Drug.efficacy ~ Ratio + cell_type,data=mean_glut5)
#model_1 <- lm(Ratio ~ Drug.efficacy,data=mean_glut5)
summary(model_1)
# PLOT:
new = data.frame(mean_glut5$Ratio,mean_glut5$cell_type)
colnames(new) <- c('Ratio','cell_type')
mean_glut5$predicted_vals <- predict(model_1,type = 'response')
mean_glut5$only_drug <- coef(model_1)[2]*mean_glut5$Ratio + coef(model_1)[1]
p <- ggplot(mean_glut5, aes(x = Ratio, y = Drug.efficacy) ) +
geom_point() +
geom_line(aes(y = only_drug), size = 1,color='red')
# Plot beautifully:
p2 <- plotLookForPaper(p,'Drug efficacy','Log(Pro/GSH)') +
theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10))
p2
p2
id_keep <- c(which(mean_glut5$Drug.efficacy < -0.5),which(mean_glut5$Drug.efficacy > 0.5))
mean_glut_box <- mean_glut5[id_keep,]
high_low_vec <- rep(NA,nrow(mean_glut_box))
for (i in 1:length(high_low_vec)){
if (mean_glut_box$Drug.efficacy[i] <= -0.5){
high_low_vec[i] <- 'Resistant'
} else {
high_low_vec[i] <- 'Sensitive'
}
}
mean_glut_box <- cbind(mean_glut_box,Response = high_low_vec)
colnames(mean_glut_box)[3] <- 'Glutathione'
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
source('boxMets2.R')
source('/boxMets2.R')
source('./boxMets2.R')
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1 <- outp1 + theme(axis.text.x = element_text(face="bold", color="grey10",
size=10),
axis.text.y = element_text(face="bold", color="grey10",
size=10),
axis.title.x = element_text(face="bold", color="black",
size=14),
axis.title.y = element_text(face="bold", color="black",
size=14))
outp1
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
ggsave('GSH_abundance_LY294002_JAN2020.png',width = 6, height = 6, units = "in")
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
source('./boxMets2.R')
outp1 <- boxMets2(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
ggsave('GSH_abundance_LY294002_JAN2020.png',width = 6, height = 6, units = "in")
setwd("E:/Dropbox/R_Dropbox/siggitRausti")
library(devtools)
document()
install_github('siggitrausti/siggitRausti')
library(siggitRausti)
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
library(siggitRausti)
outp1 <- boxMets(mean_glut_box,3,'Response','Response',stat_test = T,ref_group = 'Resistant',y_title = 'Log(GSH)',common_legend = F)
outp1
install_github('siggitrausti/siggitRausti')
